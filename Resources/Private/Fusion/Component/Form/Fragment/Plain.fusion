prototype(Garagist.Mautic:Component.Form.Fragment.Plain) < prototype(Neos.Fusion:Component) {
    @propTypes {
        id = ${PropTypes.integer}
        url = ${PropTypes.string}
        apiUrl = ${PropTypes.string}
        waitMessage = ${PropTypes.string}
    }

    waitMessage = ${Translation.translate('pleaseWait', 'Please waitâ€¦', [], 'Main', 'Garagist.Mautic')}

    id = null
    url = null
    apiUrl = null
    removeStyles = true

    @if.hasUrl_Id_ApiUrl = ${this.url && this.id && this.apiUrl}

    @private {
        javascript = ${props.url + '/media/js/mautic-form.js'}
        embededFile = ${File.readFile(props.apiUrl + "/form/embed/" + props.id)}
        embededFile.@process.removeStyles = ${props.removeStyles && value ? String.pregReplace(value, '~<style([.\s\S]*?)</style>~', ''): value}
        hasReplacements = ${Carbon.Array.check(props.replacements)}
        globalVariables = ${'window.MauticDomain="' + props.url + '";window.MauticLang={submittingMessage:"' + props.waitMessage + '"}'}
    }

    renderer = afx`
        <script data-slipstream>{private.globalVariables}</script>
        <script src={private.javascript} data-slipstream defer onload="MauticSDK.onLoad()"></script>
        {private.hasReplacements ? '' : private.embededFile}
        <Neos.Fusion:Reduce
            @if={private.hasReplacements}
            items={props.replacements}
            initialValue={private.embededFile}
            itemReducer={String.replace(carry, item.search, item.replace)}
        />
    `

    @context.cacheEntryIdentifier = ${'MauticFormPlain'+ this.url + this.id + this.apiUrl}

    @cache {
        mode = 'cached'
        // Maximum lifetime of this cache entry in seconds. Defaults to 300 seconds (5 minutes)
        maximumLifetime = 300
        entryIdentifier {
            node = ${node}
            cacheEntryIdentifier = ${cacheEntryIdentifier}
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
            2 = 'Garagist_Mautic_Form'
        }
    }
}
