prototype(Garagist.Mautic:Component.MailProperties) < prototype(Neos.Fusion:Component) {
    // If email is set the action will be edit, otherwise it will be create
    email = null

    // Redirect after the action is done
    redirect = null

    subject = null
    previewText = null
    previewTextPlaceholder = Garagist.Mautic:Component.PreviewText
    segments = null

    chooseSegment = ${Configuration.Setting('Garagist.Mautic.segment.choose')}
    chooseSegment.@process.convert = ${Type.isArray(value) ? value : Type.isInteger(value) ? [value] : null}
    allSegments = ${allSegments}
    prefilledSegments = ${prefilledSegments}
    lockPrefilledSegments = ${Configuration.Setting('Garagist.Mautic.segment.lockPrefilled')}

    @if.hasNodeAndPing = ${node && ping}
    class = 'neos-button neos-button-primary'

    _isEdit = ${!!this.email}
    _type = ${this._isEdit ? 'edit' : 'create'}
    _showSegments = ${Carbon.Array.check(this.chooseSegment) && Carbon.Array.check(this.allSegments)}
    _placeholder = ${q(node).property('titleOverride') || q(node).property('title')}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}

        _subject = ${props.subject == props._placeholder ? '' : props.subject}
        _i18n = ${Translation.id('').package('Garagist.Mautic').source('Module')}

        _label = ${this._i18n.id('email.' + props._type + (props._isEdit && props._showSegments ? '.withSegments'  : '')).translate()}
        _actionUri = Neos.Fusion:UriBuilder {
            action = ${props._type}
            arguments = Neos.Fusion:DataStructure {
                node = ${node}
                email = ${props.email}
                redirect = ${props.redirect}
            }
        }

        _confirmAttributes = Neos.Fusion:DataStructure {
            :href = ${"action + '&moduleArguments[subject]='+(subject||placeholder)+'&moduleArguments[previewText]='+(previewText||previewTextPlaceholder)" + (props._showSegments ? "+'&moduleArguments[segments]='+segments" : '')}
            :class = "segments&&!segments.length&&'pointer-events-none opacity-60'"
        }

        _xData = Neos.Fusion:DataStructure {
            action = Neos.Fusion:UriBuilder {
                action = ${props._type}
                arguments = Neos.Fusion:DataStructure {
                    node = ${node}
                    email = ${props.email}
                    redirect = ${props.redirect}
                }
            }
            subject = ${props.subject == props._placeholder ? '' : props.subject}
            placeholder = ${props._placeholder}
            previewText = ${props.previewText == props.previewTextPlaceholder ? '' : props.previewText}
            previewTextPlaceholder = ${props.previewTextPlaceholder || ''}
            segments = ${props.segments || props.prefilledSegments}
            segments.@if.show = ${props._showSegments}
        }

        renderer = afx`
            <Garagist.Mautic:Component.ActionButton
                label={props._label}
                icon="fa-pencil-alt"
                showText={props.detailView}
                footer={props._isEdit ? false : 'primary'}
                dialogTitle={this.label}
                dialogXData={Json.stringify(props._xData)}
                confirmLabel={this.label}
                initalFocusOnConfirm={!props._isEdit}
                confirmAttributes={props._confirmAttributes}
            >
                <fieldset class="!p-0">
                    <label for="subject">{props._i18n.id('subject').translate()}</label>
                    <input
                        type="text"
                        x-dialog:focus={props._isEdit}
                        x-model="subject"
                        id="subject"
                        :placeholder="placeholder"
                        class="block w-full"
                    />
                </fieldset>
                <fieldset class="!p-0">
                    <label for="preview">
                        {Translation.translate('properties.mauticPreviewText', null, [], 'NodeTypes/Mixin/Email', 'Garagist.Mautic')}
                    </label>
                    <div class="auto-grow-textarea">
                        <textarea x-model="previewText" :placeholder="previewTextPlaceholder"></textarea>
                        <span>
                            <span x-text="previewText || previewTextPlaceholder"></span>
                            <br />
                        </span>
                    </div>
                    <div class="block my-2 opacity-60">{Translation.translate('properties.mauticPreviewText.ui.help.message', null, [], 'NodeTypes/Mixin/Email', 'Garagist.Mautic')}</div>
                    <div @if={props._isEdit} class="block my-2 opacity-60">{Translation.translate('email.need.refresh', null, [], 'Module', 'Garagist.Mautic')}</div>
                </fieldset>
                <fieldset @if={props._showSegments} class="!p-0 !mt-8">
                    <legend class="!p-0 !leading-5 !text-sm">
                        {props._i18n.id('recipients').translate()}
                    </legend>
                    <Neos.Fusion:Loop items={props.chooseSegment}>
                        <Garagist.Mautic:Component.Checkbox
                            class={props.lockPrefilledSegments && Array.indexOf(props.prefilledSegments, item) != -1 ? "pointer-events-none" : null}
                            xModel="segments"
                            value={item}
                            label={props.allSegments[item].name}
                        />
                    </Neos.Fusion:Loop>
                    <div x-show="!segments.length" x-transition class="bg-neos-red text-white p-4 mt-4 mb-2 w-full">
                        {props._i18n.id('pleaseChooseMinimalOneItem').translate()}
                    </div>
                </fieldset>
            </Garagist.Mautic:Component.ActionButton>
        `
    }
}
