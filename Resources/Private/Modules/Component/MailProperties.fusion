prototype(Garagist.Mautic:Component.MailProperties) < prototype(Neos.Fusion:Component) {
    // If email is set the action will be edit, otherwise it will be create
    email = null

    // Redirect after the action is done
    redirect = null

    subject = null
    segments = null

    chooseSegment = ${Configuration.Setting('Garagist.Mautic.segment.choose')}
    chooseSegment.@process.convert = ${Type.isArray(value) ? value : Type.isInteger(value) ? [value] : null}
    allSegments = ${allSegments}
    prefilledSegments = ${prefilledSegments}
    lockPrefilledSegments = ${Configuration.Setting('Garagist.Mautic.segment.lockPrefilled')}

    @if.hasNodeAndPing = ${node && ping}
    class = 'neos-button neos-button-primary'

    _isEdit = ${!!this.email}
    _type = ${this._isEdit ? 'edit' : 'create'}
    _showSegments = ${Carbon.Array.check(this.chooseSegment) && Carbon.Array.check(this.allSegments)}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        _placeholder = ${q(node).property('titleOverride') || q(node).property('title')}
        _subject = ${props.subject == this._placeholder ? '' : props.subject}
        _i18n = ${Translation.id('').package('Garagist.Mautic').source('Module')}

        _label = ${this._i18n.id('email.' + props._type + (props._isEdit && props._showSegments ? '.withSegments'  : '')).translate()}
        _actionUri = Neos.Fusion:UriBuilder {
            action = ${props._type}
            arguments = Neos.Fusion:DataStructure {
                node = ${node}
                email = ${props.email}
                redirect = ${props.redirect}
            }
        }

        _confirmAttributes = Neos.Fusion:DataStructure {
            :href = ${"action + '&moduleArguments[subject]='+(subject||placeholder)" + (props._showSegments ? "+'&moduleArguments[segments]='+segments" : '')}
            :class = "segments&&!segments.length&&'pointer-events-none opacity-60'"
        }

        renderer = afx`
            <Garagist.Mautic:Component.ActionButton
                label={props._label}
                icon="fa-pencil-alt"
                showText={props.detailView}
                footer={props._isEdit ? false : 'primary'}
                dialogTitle={this.label}
                dialogXData={"{action:'" + props._actionUri + "', subject:'" + props._subject + "', placeholder:'" + props._placeholder + "'" + (props._showSegments ? ", segments:" + Json.stringify(props.segments || props.prefilledSegments) : "") + "}"}
                confirmLabel={this.label}
                initalFocusOnConfirm={!props._isEdit}
                confirmAttributes={props._confirmAttributes}
            >
                <fieldset>
                    <label for="subject">{props._i18n.id('subject').translate()}</label>
                    <input
                        type="text"
                        x-dialog:focus={props._isEdit}
                        x-model="subject"
                        id="subject"
                        :placeholder="placeholder"
                        class="block w-full"
                    />
                </fieldset>
                <fieldset @if={props._showSegments} class="mx-4">
                    <legend class="!p-0 !leading-5 !text-sm">
                        {props._i18n.id('recipients').translate()}
                    </legend>
                    <Neos.Fusion:Loop items={props.chooseSegment}>
                        <label class={[props.lockPrefilledSegments && Array.indexOf(props.prefilledSegments, item) != -1 ? "pointer-events-none" : null, "!p-0 !flex items-center justify-start mt-2 cursor-pointer group"]}>
                            <input
                                x-model="segments"
                                value={item}
                                type="checkbox"
                                class="peer sr-only"
                            />
                            <i class="fas fa-check w-5 h-5 mr-2 overflow-hidden relative bg-neos-light border border-neos-lightest text-neos-lighter flex items-center justify-center group-hover:border-neos-blue-light group-focus-within:border-neos-blue-light peer-checked:text-white peer-checked:bg-neos-blue-light peer-checked:border-neos-blue-light"></i>
                            <span>{props.allSegments[item].name}</span>
                        </label>
                    </Neos.Fusion:Loop>
                    <div x-show="!segments.length" x-transition class="bg-neos-red text-white p-4 my-2 w-full">
                        {props._i18n.id('pleaseChooseMinimalOneItem').translate()}
                    </div>
                </fieldset>
            </Garagist.Mautic:Component.ActionButton>
        `
    }
}
