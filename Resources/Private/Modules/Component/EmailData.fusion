prototype(Garagist.Mautic:Component.EmailData) < prototype(Neos.Fusion:Component) {
    email = null
    node = null
    redirect = 'node'

    @if.hasEmail = ${this.email}

    renderer = Neos.Fusion:DataStructure {
        name = ${props.email.name}
        dateCreated = ${Date.format(props.email.dateCreated, 'd.m.Y H:m:s')}
        emailIdentifier = ${props.email.emailIdentifier}

        properties = ${props.email.properties}
        subject = ${this.properties.subject}
        previewText = ${this.properties.previewText}
        segments = ${this.properties.segments}
        sent = ${Carbon.Array.check(props.email.properties.sent) ? Array.sort(props.email.properties.sent) : []}
        hrefArguments = Neos.Fusion:DataStructure {
            node = ${props.node}
            email = ${props.email}
            redirect = ${props.redirect}
        }
        task = ${props.email.task}

        isIdle = ${props.email.task == 'idle'}
        isSended = ${Carbon.Array.check(props.email.properties.sent)}
        canPublish = ${this.isIdle && (props.email.dateModified != null && !this.isSended && !props.email.published)}
        canUnpublish = ${this.isIdle && (!this.isSended && props.email.published)}
        canTest = ${this.canPublish || this.canUnpublish}
        canEdit = ${this.canPublish}
        canSend = ${this.isIdle && (!this.isSended && props.email.published)}
        canUpdate = ${this.isIdle && this.properties && (!this.isSended && !props.email.published)}
        canResend = ${this.isIdle && this.isSended}
        canDelete= ${this.isIdle}
        canPublishAndSend = ${this.isIdle && (props.email.dateModified != null && !this.isSended)}
        canUnpublishAndUpdate = ${this.isIdle && !this.isSended}

        isRunning = ${props.email.task != 'idle' && props.email.task != 'failed'}
        isFailed = ${props.email.task == 'failed'}
    }
}
